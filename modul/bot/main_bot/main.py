# modul/bot/main_bot/main.py (To'liq to'g'irlangan versiya)

import asyncio
from datetime import datetime, timedelta
from aiogram.filters import Command
from aiogram import Router, Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from asgiref.sync import sync_to_async
from django.db.models import F as DjangoF
from django.utils import timezone
from modul.config import settings_conf
from modul.loader import main_bot_router, client_bot_router
from modul.models import User
from modul.bot.main_bot.services.user_service import get_user_by_uid, create_user_directly
from modul.bot.main_bot.handlers.create_bot import create_bot_router
from modul.bot.main_bot.handlers.manage_bots import manage_bots_router
from aiogram.types import LabeledPrice
import requests
import logging

logger = logging.getLogger(__name__)

ADMIN_CHAT_ID = 575148251
MAIN_BOT_USERNAME = "konstruktor_test_my_bot"
STATS_COMMAND_ENABLED = True
webhook_url = 'https://ismoilov299.uz/'


async def main_menu():
    """Asosiy menyu klaviaturasi"""
    buttons = [
        [
            InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ ‚öôÔ∏è", callback_data="create_bot"),
            InlineKeyboardButton(text="–ú–æ–∏ –±–æ—Ç—ã üñ•Ô∏è", callback_data="my_bots")
        ],
        [
            InlineKeyboardButton(text="–ò–Ω—Ñ–æ üìñ", callback_data="info"),
            InlineKeyboardButton(text="FAQ üí¨", callback_data="faq")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def registration_keyboard(registration_url):
    """Ro'yxatdan o'tish klaviaturasi"""
    buttons = [[InlineKeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url=registration_url)]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# ==========================================
# UTILITY FUNCTIONS - BOT VALIDATSIYASI
# ==========================================

@sync_to_async
def validate_bot_exists(bot_db_id: int):
    """
    Bot bazada mavjudligini tekshirish
    bot_db_id - ChatGPT botning database ID si
    Returns: (exists: bool, bot_info: dict or None)
    """
    try:
        from modul.models import Bot

        bot = Bot.objects.filter(id=bot_db_id).select_related('owner').first()

        if bot:
            owner_info = None
            if bot.owner:
                owner_info = {
                    'uid': bot.owner.uid,
                    'username': bot.owner.username,
                    'first_name': bot.owner.first_name
                }

            bot_info = {
                'id': bot.id,
                'username': bot.username,
                'bot_type': getattr(bot, 'bot_type', None),
                'owner': owner_info
            }

            logger.info(f"‚úÖ Bot validated: ID={bot_db_id}, username={bot.username}")
            return True, bot_info
        else:
            logger.error(f"‚ùå Bot not found: ID={bot_db_id}")
            return False, None

    except Exception as e:
        logger.error(f"Error validating bot {bot_db_id}: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False, None


@sync_to_async
def get_detailed_payment_statistics(days=7):
    """To'lovlar statistikasini batafsil olish"""
    try:
        from modul.models import PaymentTransaction, User, Bot
        from django.db.models import Sum, Count, Q, F as DjangoF

        now = timezone.now()
        start_date = now - timedelta(days=days)

        # Faqat musbat to'lovlar
        all_payments = PaymentTransaction.objects.filter(
            status='completed',
            created_at__gte=start_date,
            amount_stars__gt=0,
            amount_rubles__gt=0
        ).order_by('-created_at')

        stats = {
            'total_payments': all_payments.count(),
            'total_stars': all_payments.aggregate(Sum('amount_stars'))['amount_stars__sum'] or 0,
            'total_rubles': all_payments.aggregate(Sum('amount_rubles'))['amount_rubles__sum'] or 0,
            'unique_users': all_payments.values('user_id').distinct().count(),
            'unique_bots': all_payments.values('bot_id').distinct().count(),
        }

        # Batafsil to'lovlar ro'yxati
        detailed_payments = []
        for payment in all_payments[:50]:
            try:
                user = User.objects.filter(uid=payment.user_id).first()
                user_name = "Unknown"
                user_username = "No username"

                if user:
                    user_name = user.first_name or "No name"
                    if user.last_name:
                        user_name += f" {user.last_name}"
                    user_username = f"@{user.username}" if user.username else "No username"

                bot = None
                try:
                    bot = Bot.objects.filter(id=payment.bot_id).select_related('owner').first()
                except Exception as bot_error:
                    logger.error(f"Error finding bot {payment.bot_id}: {bot_error}")

                bot_name = "Unknown Bot"
                bot_username = "unknown"
                bot_owner_id = None
                bot_owner_name = "Unknown"
                bot_owner_username = "unknown"

                if bot:
                    bot_name = f"Bot #{bot.id}"
                    bot_username = bot.username or "unknown"

                    if bot.owner:
                        owner = bot.owner
                        bot_owner_id = owner.uid
                        bot_owner_name = owner.first_name or "No name"
                        if owner.last_name:
                            bot_owner_name += f" {owner.last_name}"
                        bot_owner_username = f"@{owner.username}" if owner.username else "No username"

                detailed_payments.append({
                    'id': payment.id,
                    'date': payment.created_at.strftime('%d.%m.%Y %H:%M'),
                    'payment_id': payment.payment_id[:20] if payment.payment_id else 'N/A',
                    'user_id': payment.user_id,
                    'user_name': user_name,
                    'user_username': user_username,
                    'bot_id': payment.bot_id,
                    'bot_name': bot_name,
                    'bot_username': bot_username,
                    'bot_owner_id': bot_owner_id,
                    'bot_owner_name': bot_owner_name,
                    'bot_owner_username': bot_owner_username,
                    'stars': payment.amount_stars,
                    'rubles': payment.amount_rubles,
                })

            except Exception as e:
                logger.error(f"Error processing payment {payment.id}: {e}")
                continue

        stats['detailed_payments'] = detailed_payments

        # Bot statistikasi
        bot_stats = []
        for bot_payment in all_payments.values('bot_id').annotate(
                count=Count('id'),
                total_stars=Sum('amount_stars'),
                total_rubles=Sum('amount_rubles')
        ).order_by('-total_rubles'):
            try:
                bot = Bot.objects.filter(id=bot_payment['bot_id']).select_related('owner').first()
                if bot:
                    owner_name = "Unknown"
                    owner_username = "unknown"
                    if bot.owner:
                        owner_name = bot.owner.first_name or "No name"
                        if bot.owner.last_name:
                            owner_name += f" {bot.owner.last_name}"
                        owner_username = f"@{bot.owner.username}" if bot.owner.username else "No username"

                    bot_stats.append({
                        'bot_id': bot.id,
                        'bot_name': f"@{bot.username}" if bot.username else f"Bot #{bot.id}",
                        'bot_username': bot.username or "unknown",
                        'owner_id': bot.owner.uid if bot.owner else None,
                        'owner_name': owner_name,
                        'owner_username': owner_username,
                        'count': bot_payment['count'],
                        'total_stars': bot_payment['total_stars'],
                        'total_rubles': bot_payment['total_rubles']
                    })
            except Exception as e:
                logger.error(f"Error processing bot stats: {e}")
                continue

        stats['by_bot'] = bot_stats

        # Kunlik statistika
        daily_stats = []
        for i in range(days):
            day_start = now - timedelta(days=i + 1)
            day_end = now - timedelta(days=i)
            day_payments = all_payments.filter(
                created_at__gte=day_start,
                created_at__lt=day_end
            )
            daily_stats.append({
                'date': day_start.strftime('%d.%m.%Y'),
                'count': day_payments.count(),
                'rubles': day_payments.aggregate(Sum('amount_rubles'))['amount_rubles__sum'] or 0,
                'stars': day_payments.aggregate(Sum('amount_stars'))['amount_stars__sum'] or 0
            })
        stats['daily'] = daily_stats

        # Top users
        top_users_data = []
        for user_payment in all_payments.values('user_id').annotate(
                total_rubles=Sum('amount_rubles'),
                total_payments=Count('id'),
                total_stars=Sum('amount_stars')
        ).order_by('-total_rubles')[:10]:

            try:
                user = User.objects.filter(uid=user_payment['user_id']).first()

                if user:
                    user_name = user.first_name or "No name"
                    if user.last_name:
                        user_name += f" {user.last_name}"
                    user_username = f"@{user.username}" if user.username else "No username"
                else:
                    user_name = "Unknown"
                    user_username = "unknown"

                top_users_data.append({
                    'user_id': user_payment['user_id'],
                    'user_name': user_name,
                    'user_username': user_username,
                    'total_rubles': user_payment['total_rubles'],
                    'total_payments': user_payment['total_payments'],
                    'total_stars': user_payment['total_stars']
                })
            except Exception as e:
                logger.error(f"Error processing top user: {e}")
                continue

        stats['top_users'] = top_users_data

        return stats

    except Exception as e:
        logger.error(f"Error getting detailed payment statistics: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return None


def format_detailed_statistics_message(stats, period_days=7):
    """Umumiy statistika xabari"""
    if not stats:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

    message = f"üìä <b>–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô</b>\n"
    message += f"üìÖ <i>–ü–µ—Ä–∏–æ–¥: {period_days} –¥–Ω–µ–π</i>\n"
    message += f"{'=' * 40}\n\n"

    message += f"üí∞ <b>–û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:</b>\n"
    message += f"‚îú –ü–ª–∞—Ç–µ–∂–µ–π: <b>{stats['total_payments']}</b> —à—Ç\n"
    message += f"‚îú –ó–≤–µ–∑–¥: <b>{stats['total_stars']}</b> ‚≠êÔ∏è\n"
    message += f"‚îú –°—É–º–º–∞: <b>{stats['total_rubles']:.2f}‚ÇΩ</b>\n"
    message += f"‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['unique_users']}</b> —á–µ–ª\n"
    message += f"‚îî –ë–æ—Ç–æ–≤: <b>{stats['unique_bots']}</b> —à—Ç\n\n"

    if stats['total_payments'] > 0:
        avg_payment = stats['total_rubles'] / stats['total_payments']
        avg_per_user = stats['total_rubles'] / stats['unique_users'] if stats['unique_users'] > 0 else 0

        message += f"üìà <b>–°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:</b>\n"
        message += f"‚îú –ü–ª–∞—Ç–µ–∂: <b>{avg_payment:.2f}‚ÇΩ</b>\n"
        message += f"‚îî –ù–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{avg_per_user:.2f}‚ÇΩ</b>\n\n"

    if stats['by_bot']:
        message += f"ü§ñ <b>–¢–û–ü –ë–û–¢–û–í:</b>\n"
        for idx, bot in enumerate(stats['by_bot'][:5], 1):
            message += f"\n<b>{idx}. {bot['bot_name']}</b>\n"
            message += f"‚îú Username: @{bot['bot_username']}\n"
            message += f"‚îú Bot ID: <code>{bot['bot_id']}</code>\n"
            message += f"‚îú üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {bot['owner_name']}\n"
            message += f"‚îú Username: {bot['owner_username']}\n"
            message += f"‚îú Owner ID: <code>{bot['owner_id']}</code>\n"
            message += f"‚îú –ü–ª–∞—Ç–µ–∂–µ–π: <b>{bot['count']}</b> —à—Ç\n"
            message += f"‚îú –ó–≤–µ–∑–¥: <b>{bot['total_stars']}</b> ‚≠êÔ∏è\n"
            message += f"‚îî –°—É–º–º–∞: <b>{bot['total_rubles']:.2f}‚ÇΩ</b>\n"
        message += "\n"

    return message


def format_recent_payments_message(stats, limit=10):
    """Oxirgi to'lovlar xabari"""
    if not stats or not stats.get('detailed_payments'):
        return "‚ùå –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    message = f"üìã <b>–ü–û–°–õ–ï–î–ù–ò–ï {limit} –ü–õ–ê–¢–ï–ñ–ï–ô:</b>\n"
    message += f"{'=' * 40}\n\n"

    for idx, payment in enumerate(stats['detailed_payments'][:limit], 1):
        bot_display_name = f"@{payment['bot_username']}" if payment['bot_username'] != 'unknown' else payment[
            'bot_name']

        message += f"<b>{idx}. –ü–ª–∞—Ç–µ–∂ #{payment['id']}</b>\n"
        message += f"‚îú üìÖ –î–∞—Ç–∞: {payment['date']}\n"
        message += f"‚îú üí≥ ID: <code>{payment['payment_id']}</code>\n\n"

        message += f"‚îú üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
        message += f"‚îÇ  ‚îú –ò–º—è: {payment['user_name']}\n"
        message += f"‚îÇ  ‚îú Username: {payment['user_username']}\n"
        message += f"‚îÇ  ‚îî ID: <code>{payment['user_id']}</code>\n\n"

        message += f"‚îú ü§ñ <b>–ë–æ—Ç:</b>\n"
        message += f"‚îÇ  ‚îú –ù–∞–∑–≤–∞–Ω–∏–µ: {bot_display_name}\n"
        message += f"‚îÇ  ‚îî ID: <code>{payment['bot_id']}</code>\n\n"

        if payment['bot_owner_id']:
            message += f"‚îú üë®‚Äçüíº <b>–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞:</b>\n"
            message += f"‚îÇ  ‚îú –ò–º—è: {payment['bot_owner_name']}\n"
            message += f"‚îÇ  ‚îú Username: {payment['bot_owner_username']}\n"
            message += f"‚îÇ  ‚îî ID: <code>{payment['bot_owner_id']}</code>\n\n"

        message += f"‚îî üí∞ <b>–°—É–º–º–∞:</b> {payment['stars']} ‚≠êÔ∏è = {payment['rubles']}‚ÇΩ\n"
        message += f"\n{'-' * 40}\n\n"

    return message


def format_top_users_message(stats):
    """Top users xabari"""
    if not stats or not stats.get('top_users'):
        return "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    message = f"üèÜ <b>–¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:</b>\n"
    message += f"{'=' * 40}\n\n"

    for idx, user in enumerate(stats['top_users'], 1):
        message += f"<b>{idx}. {user['user_name']}</b>\n"
        message += f"‚îú Username: {user['user_username']}\n"
        message += f"‚îú ID: <code>{user['user_id']}</code>\n"
        message += f"‚îú –ü–ª–∞—Ç–µ–∂–µ–π: <b>{user['total_payments']}</b> —à—Ç\n"
        message += f"‚îú –ó–≤–µ–∑–¥: <b>{user['total_stars']}</b> ‚≠êÔ∏è\n"
        message += f"‚îî –í—Å–µ–≥–æ: <b>{user['total_rubles']:.2f}‚ÇΩ</b>\n\n"

    return message


def format_daily_stats_message(stats, period_days=7):
    """Kunlik statistika xabari"""
    if not stats or not stats.get('daily'):
        return "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    message = f"üìÖ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–ù–Ø–ú ({period_days} –¥–Ω–µ–π):</b>\n"
    message += f"{'=' * 40}\n\n"

    for day in stats['daily']:
        if day['count'] > 0:
            message += f"‚Ä¢ <b>{day['date']}</b>\n"
            message += f"  ‚îú –ü–ª–∞—Ç–µ–∂–µ–π: {day['count']} —à—Ç\n"
            message += f"  ‚îú –ó–≤–µ–∑–¥: {day['stars']} ‚≠êÔ∏è\n"
            message += f"  ‚îî –°—É–º–º–∞: {day['rubles']:.2f}‚ÇΩ\n\n"

    return message


async def send_weekly_report(bot):
    """Haftalik hisobot yuborish"""
    try:
        logger.info("üìä Generating detailed weekly payment report...")

        stats = await get_detailed_payment_statistics(days=7)

        if stats and stats['total_payments'] > 0:
            msg1 = "üéâ <b>–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢</b>\n\n"
            msg1 += format_detailed_statistics_message(stats, period_days=7)

            msg2 = format_recent_payments_message(stats, limit=10)
            msg3 = format_top_users_message(stats)
            msg4 = format_daily_stats_message(stats, period_days=7)

            await bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg1, parse_mode="HTML")
            await asyncio.sleep(0.5)
            await bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg2, parse_mode="HTML")
            await asyncio.sleep(0.5)
            await bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg3, parse_mode="HTML")
            await asyncio.sleep(0.5)
            await bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg4, parse_mode="HTML")

            logger.info("‚úÖ Weekly detailed report sent successfully")
        else:
            logger.info("‚ÑπÔ∏è No payments this week, skipping report")

    except Exception as e:
        logger.error(f"‚ùå Error sending weekly report: {e}")
        import traceback
        logger.error(traceback.format_exc())


async def schedule_weekly_reports(bot):
    """Haftalik hisobotlarni avtomatik yuborish"""
    while True:
        try:
            now = datetime.now()

            days_until_sunday = (6 - now.weekday()) % 7
            if days_until_sunday == 0 and now.hour >= 20:
                days_until_sunday = 7

            next_sunday = now + timedelta(days=days_until_sunday)
            next_sunday = next_sunday.replace(hour=20, minute=0, second=0, microsecond=0)

            if days_until_sunday == 0 and now.hour < 20:
                next_sunday = now.replace(hour=20, minute=0, second=0, microsecond=0)

            wait_seconds = (next_sunday - now).total_seconds()

            logger.info(f"‚è∞ Next weekly report: {next_sunday.strftime('%d.%m.%Y %H:%M:%S')}")
            logger.info(f"‚è≥ Waiting {wait_seconds / 3600:.1f} hours...")

            await asyncio.sleep(wait_seconds)
            await send_weekly_report(bot)
            await asyncio.sleep(60)

        except Exception as e:
            logger.error(f"‚ùå Error in weekly report scheduler: {e}")
            await asyncio.sleep(3600)


# ==========================================
# DATABASE FUNCTIONS
# ==========================================

@sync_to_async
def save_payment_to_db(user_id, source_bot_id, stars_amount, rubles_amount, payment_id, payment_date):
    """To'lovni bazaga saqlash - Django ORM"""
    try:
        from modul.models import PaymentTransaction

        payment = PaymentTransaction.objects.create(
            user_id=user_id,
            bot_id=source_bot_id,
            amount_stars=stars_amount,
            amount_rubles=rubles_amount,
            payment_id=payment_id,
            status='completed'
        )

        logger.info(f"‚úÖ Payment saved to DB: ID={payment.id}")
        return True

    except Exception as e:
        logger.error(f"‚ùå Failed to save payment to DB: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False


async def save_payment_transaction(
        user_id: int,
        source_bot_id: int,
        stars_amount: int,
        rubles_amount: float,
        payment_id: str,
        payment_date
) -> bool:
    """To'lovni saqlash - wrapper"""
    try:
        logger.info(f"üíæ Saving payment...")
        logger.info(f"  User: {user_id}, Bot: {source_bot_id}")
        logger.info(f"  Amount: {rubles_amount}‚ÇΩ, Payment ID: {payment_id}")

        result = await save_payment_to_db(
            user_id, source_bot_id, stars_amount,
            rubles_amount, payment_id, payment_date
        )

        if result:
            logger.info("‚úÖ Payment saved successfully")

        return result

    except Exception as e:
        logger.error(f"‚ùå Error saving payment: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False


@sync_to_async
def get_user_info(user_id: int, bot_id: int):
    """Foydalanuvchi ma'lumotlarini olish"""
    try:
        user = User.objects.filter(uid=user_id).first()

        if user:
            return {
                'username': user.username if user.username else '–ù–µ —É–∫–∞–∑–∞–Ω',
                'first_name': user.first_name if user.first_name else '–ù–µ —É–∫–∞–∑–∞–Ω',
            }
        return None
    except Exception as e:
        logger.error(f"Error getting user info: {e}")
        return None


@sync_to_async
def get_user_balance(user_id: int, bot_id: int):
    """Foydalanuvchining balansini hisoblash"""
    try:
        from modul.models import PaymentTransaction
        from django.db.models import Sum

        total = PaymentTransaction.objects.filter(
            user_id=user_id,
            bot_id=bot_id,
            status='completed'
        ).aggregate(total=Sum('amount_rubles'))

        balance = total['total'] if total['total'] else 0
        return balance

    except Exception as e:
        logger.error(f"Error calculating balance: {e}")
        return 0


async def send_admin_notification(bot, user_id: int, bot_db_id: int, stars_amount: int, rubles_amount: float,
                                  payment_id: str):
    """Admin ga batafsil xabar yuborish - bot ma'lumotlari bilan"""
    try:
        # Foydalanuvchi ma'lumotlarini olish
        user_info = await get_user_info(user_id, bot_db_id)

        if user_info:
            username = user_info.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')
            first_name = user_info.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω')
        else:
            username = '–ù–µ –Ω–∞–π–¥–µ–Ω'
            first_name = '–ù–µ –Ω–∞–π–¥–µ–Ω'

        balance = await get_user_balance(user_id, bot_db_id)

        # Bot ma'lumotlarini olish
        bot_exists, bot_info = await validate_bot_exists(bot_db_id)

        bot_display = f"<code>{bot_db_id}</code>"
        bot_owner_info = ""

        if bot_exists and bot_info:
            bot_display = f"@{bot_info['username']} (ID: <code>{bot_db_id}</code>)"

            if bot_info['owner']:
                owner = bot_info['owner']
                bot_owner_info = (
                    f"\n\nüë®‚Äçüíº <b>–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞:</b>\n"
                    f"‚Ä¢ ID: <code>{owner['uid']}</code>\n"
                    f"‚Ä¢ –ò–º—è: {owner['first_name']}\n"
                    f"‚Ä¢ Username: @{owner['username']}" if owner['username'] else f"‚Ä¢ –ò–º—è: {owner['first_name']}"
                )

        message = (
            f"üí∞ <b>–ù–û–í–û–ï –ü–û–ü–û–õ–ù–ï–ù–ò–ï</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
            f"‚Ä¢ ID: <code>{user_id}</code>\n"
            f"‚Ä¢ –ò–º—è: {first_name}\n"
            f"‚Ä¢ Username: @{username}\n\n"
            f"üíé <b>–î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞:</b>\n"
            f"‚Ä¢ –ó–≤–µ–∑–¥—ã: {stars_amount} ‚≠êÔ∏è\n"
            f"‚Ä¢ –ó–∞—á–∏—Å–ª–µ–Ω–æ: {rubles_amount}‚ÇΩ\n"
            f"‚Ä¢ Payment ID: <code>{payment_id}</code>\n\n"
            f"ü§ñ <b>–ë–æ—Ç:</b> {bot_display}"
            f"{bot_owner_info}\n\n"
            f"üí≥ <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {balance:.2f}‚ÇΩ\n\n"
            f"üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        )

        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=message,
            parse_mode="HTML"
        )

        logger.info(f"‚úÖ Admin notification sent for payment {payment_id}")
        return True

    except Exception as e:
        logger.error(f"‚ùå Error sending admin notification: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False


async def send_user_notification(user_id: int, bot_id: int, amount: float):
    """Foydalanuvchiga xabar yuborish"""
    try:
        logger.info(f"üì® Should send notification to user {user_id} about {amount}‚ÇΩ top-up")
        # TODO: Implement client bot notification
        return True
    except Exception as e:
        logger.error(f"‚ùå Error sending user notification: {e}")
        return False


# ==========================================
# MAIN BOT HANDLERS
# ==========================================

def init_bot_handlers():
    @main_bot_router.message(CommandStart())
    async def cmd_start(message: Message, state: FSMContext):
        """Start komandasi handleri"""
        logger.info("=" * 50)
        logger.info(f"üöÄ START command from user {message.from_user.id}")
        logger.info(f"üìù Message text: '{message.text}'")

        user = message.from_user
        args = message.text.split()
        logger.info(f"üìä Args: {args}")
        logger.info(f"üìè Args count: {len(args)}")

        # Agar to'lov parametrlari bo'lsa
        if len(args) > 1:
            logger.info(f"‚úÖ Has args[1]: '{args[1]}'")

            if args[1].startswith("gptbot_"):
                logger.info("‚úÖ Payment parameters detected!")
                logger.info("üîÄ Redirecting to handle_payment_start...")
                await handle_payment_start(message, args[1])
                logger.info("‚úÖ handle_payment_start completed")
                logger.info("=" * 50)
                return
            else:
                logger.info(f"‚ÑπÔ∏è Args[1] doesn't start with 'gptbot_': '{args[1]}'")
        else:
            logger.info("‚ÑπÔ∏è No additional args")

        # Normal start command
        logger.info("üìã Processing normal start command...")

        try:
            db_user = await get_user_by_uid(user.id)

            welcome_text = (
                f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!</b>\n\n"
                f"ü§ñ <b>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–æ–≤</b> - —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ Telegram –±–æ—Ç–∞–º–∏!\n\n"
                f"üîß <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
                f"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤ –∑–∞ 2-3 –º–∏–Ω—É—Ç—ã\n"
                f"‚Ä¢ 6 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤\n"
                f"‚Ä¢ –ü–æ–ª–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
                f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )

            if db_user:
                await message.answer(
                    welcome_text,
                    reply_markup=await main_menu(),
                    parse_mode="HTML"
                )
                logger.info(f"‚úÖ Main menu shown to existing user")
            else:
                new_user = await handle_auto_registration(message, user)
                if new_user:
                    await message.answer(
                        welcome_text,
                        reply_markup=await main_menu(),
                        parse_mode="HTML"
                    )
                    logger.info(f"‚úÖ Main menu shown to new user")
                else:
                    await message.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n/start",
                        parse_mode="HTML"
                    )

        except Exception as e:
            logger.error(f"‚ùå Error in cmd_start: {e}")
            import traceback
            logger.error(f"Traceback:\n{traceback.format_exc()}")

            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n/start",
                parse_mode="HTML"
            )

        logger.info("=" * 50)

    @main_bot_router.message(Command("stats", "payment_stats"))
    async def cmd_payment_stats(message: Message):
        """Batafsil to'lovlar statistikasi"""
        try:
            if message.from_user.id != ADMIN_CHAT_ID:
                await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
                return

            args = message.text.split()
            days = 7

            if len(args) > 1:
                try:
                    days = int(args[1])
                    if days < 1 or days > 365:
                        days = 7
                except ValueError:
                    days = 7

            wait_msg = await message.answer("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")

            stats = await get_detailed_payment_statistics(days=days)

            if stats:
                msg1 = format_detailed_statistics_message(stats, period_days=days)
                await wait_msg.edit_text(msg1, parse_mode="HTML")

                await asyncio.sleep(1)

                msg2 = format_recent_payments_message(stats, limit=10)
                await message.answer(msg2, parse_mode="HTML")

                await asyncio.sleep(0.5)

                msg3 = format_top_users_message(stats)
                await message.answer(msg3, parse_mode="HTML")

                await asyncio.sleep(0.5)

                msg4 = format_daily_stats_message(stats, period_days=days)
                await message.answer(msg4, parse_mode="HTML")

                logger.info(f"‚úÖ Detailed statistics sent for {days} days")
            else:
                await wait_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

        except Exception as e:
            logger.error(f"‚ùå Error in payment_stats: {e}")
            import traceback
            logger.error(traceback.format_exc())
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @main_bot_router.message(Command("send_weekly_report"))
    async def cmd_send_weekly_report(message: Message):
        """Haftalik hisobotni darhol yuborish (test)"""
        try:
            if message.from_user.id != ADMIN_CHAT_ID:
                await message.answer("‚ùå Bu komanda faqat admin uchun!")
                return

            await message.answer("üìä Haftalik hisobot tayyorlanmoqda...")
            await send_weekly_report(message.bot)
            await message.answer("‚úÖ Hisobot yuborildi!")

        except Exception as e:
            logger.error(f"Error in send_weekly_report command: {e}")
            await message.answer(f"‚ùå Xatolik: {e}")

    async def handle_payment_start(message: Message, payment_args: str):
        """Invoice yuborish - bot validatsiyasi bilan"""
        try:
            parts = payment_args.split("_")

            if len(parts) >= 4:
                client_user_id = int(parts[1])
                stars_amount = int(parts[2])
                bot_db_id = int(parts[3])  # Bu ChatGPT botning database ID si

                # Bot mavjudligini tekshirish
                bot_exists, bot_info = await validate_bot_exists(bot_db_id)

                if not bot_exists:
                    await message.answer(
                        f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
                        f"–ë–æ—Ç —Å ID <code>{bot_db_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                        f"–í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ ID –Ω–µ–≤–µ—Ä–Ω—ã–π.",
                        parse_mode="HTML"
                    )
                    logger.error(f"‚ùå Bot {bot_db_id} not found, payment cancelled")
                    return

                stars_to_rubles = {1: 5, 5: 25}

                if stars_amount not in stars_to_rubles:
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
                    return

                rubles_amount = stars_to_rubles[stars_amount]

                logger.info("=" * 50)
                logger.info("üí≥ CREATING INVOICE...")
                logger.info(f"ü§ñ Main bot ID: {message.bot.id}")
                logger.info(f"üë§ Client user: {client_user_id}")
                logger.info(f"‚≠ê Stars: {stars_amount}")
                logger.info(f"üí∞ Rubles: {rubles_amount}")
                logger.info(f"üîó Target bot DB ID: {bot_db_id}")
                if bot_info:
                    logger.info(f"ü§ñ Bot info: @{bot_info['username']}")
                    if bot_info['owner']:
                        logger.info(
                            f"üë®‚Äçüíº Bot owner: {bot_info['owner']['first_name']} (ID: {bot_info['owner']['uid']})")
                logger.info("=" * 50)

                try:
                    await message.answer_invoice(
                        title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ChatGPT –±–æ—Ç–∞",
                        description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {rubles_amount}‚ÇΩ",
                        payload=f"gptbot_topup_{client_user_id}_{stars_amount}_{rubles_amount}_{bot_db_id}",
                        currency="XTR",
                        prices=[LabeledPrice(label=f"{stars_amount} ‚≠êÔ∏è", amount=stars_amount)],
                        provider_token="",
                    )

                    logger.info("‚úÖ Invoice sent successfully!")

                except Exception as e:
                    logger.error(f"‚ùå Invoice error: {e}")
                    import traceback
                    logger.error(traceback.format_exc())

                    await message.answer(
                        f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞:\n<code>{e}</code>",
                        parse_mode="HTML"
                    )
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

        except Exception as e:
            logger.error(f"‚ùå Error in handle_payment_start: {e}")
            import traceback
            logger.error(traceback.format_exc())

    async def handle_auto_registration(message: Message, user):
        """Yangi foydalanuvchini avtomatik ro'yxatdan o'tkazish"""
        try:
            telegram_id = user.id
            first_name = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            last_name = user.last_name or ""
            username = user.username or ""

            photo_url = None
            try:
                user_photos = await message.bot.get_user_profile_photos(telegram_id)
                if user_photos.total_count > 0:
                    photo_id = user_photos.photos[0][-1].file_id
                    photo_file = await message.bot.get_file(photo_id)
                    photo_url = f"https://api.telegram.org/file/bot{message.bot.token}/{photo_file.file_path}"
            except Exception as e:
                logger.warning(f"Could not get user photo for {telegram_id}: {e}")

            new_user = await create_user_directly(
                uid=telegram_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                profile_image_url=photo_url
            )

            if new_user:
                logger.info(f"User {telegram_id} auto-registered successfully")
                return new_user
            else:
                logger.error(f"Failed to auto-register user {telegram_id}")
                return None

        except Exception as e:
            logger.error(f"Error in auto registration for user {telegram_id}: {e}")
            return None

    # ===== PAYMENT HANDLERS =====

    @main_bot_router.pre_checkout_query()
    async def pre_checkout_query_handler(pre_checkout_query):
        """To'lovdan oldin tekshirish"""
        try:
            logger.info("=" * 50)
            logger.info(f"üí≥ PRE-CHECKOUT QUERY received")
            logger.info(f"From user: {pre_checkout_query.from_user.id}")
            logger.info(f"Payload: {pre_checkout_query.invoice_payload}")

            payload = pre_checkout_query.invoice_payload

            if payload.startswith("gptbot_topup_"):
                logger.info("‚úÖ Payload format valid")

                try:
                    parts = payload.split("_")
                    client_user_id = int(parts[2])
                    stars_amount = int(parts[3])
                    rubles_amount = float(parts[4])
                    bot_db_id = int(parts[5])

                    logger.info(
                        f"üìä Parsed: user={client_user_id}, stars={stars_amount}, rubles={rubles_amount}, bot_db_id={bot_db_id}")

                    # DARHOL TASDIQLASH
                    await pre_checkout_query.answer(ok=True)

                    logger.info("‚úÖ Pre-checkout approved!")
                    logger.info("=" * 50)

                except (ValueError, IndexError) as e:
                    logger.error(f"‚ùå Parse error: {e}")
                    await pre_checkout_query.answer(
                        ok=False,
                        error_message="–û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–ª–∞—Ç–µ–∂–∞"
                    )

            else:
                logger.warning(f"‚ö†Ô∏è Invalid payload format: {payload}")
                await pre_checkout_query.answer(
                    ok=False,
                    error_message="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂"
                )
                logger.info("=" * 50)

        except Exception as e:
            logger.error(f"‚ùå PRE-CHECKOUT ERROR: {e}")
            import traceback
            logger.error(traceback.format_exc())

            try:
                await pre_checkout_query.answer(
                    ok=False,
                    error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
                )
            except Exception as answer_error:
                logger.error(f"‚ùå Failed to send answer: {answer_error}")

            logger.info("=" * 50)

    @main_bot_router.message(F.successful_payment)
    async def successful_payment_handler(message: Message):
        """Muvaffaqiyatli to'lov handleri - bot validatsiyasi bilan"""
        try:
            logger.info("=" * 50)
            logger.info(f"‚úÖ SUCCESSFUL PAYMENT received")
            logger.info(f"From user: {message.from_user.id}")

            payment = message.successful_payment
            payload = payment.invoice_payload
            payment_id = payment.telegram_payment_charge_id

            logger.info(f"Payload: {payload}")
            logger.info(f"Payment ID: {payment_id}")
            logger.info(f"Total amount: {payment.total_amount}")

            if payload.startswith("gptbot_topup_"):
                parts = payload.split("_")
                client_user_id = int(parts[2])
                stars_amount = int(parts[3])
                rubles_amount = float(parts[4])
                bot_db_id = int(parts[5])

                logger.info(f"üìä Payment details:")
                logger.info(f"  - Client: {client_user_id}")
                logger.info(f"  - Stars: {stars_amount}")
                logger.info(f"  - Rubles: {rubles_amount}")
                logger.info(f"  - Bot DB ID: {bot_db_id}")

                # Bot mavjudligini tekshirish
                bot_exists, bot_info = await validate_bot_exists(bot_db_id)

                if not bot_exists:
                    logger.error(f"‚ùå Bot {bot_db_id} not found during payment processing!")
                    await message.answer(
                        f"‚ö†Ô∏è <b>–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                        f"üíé –û–ø–ª–∞—á–µ–Ω–æ: {stars_amount} ‚≠êÔ∏è\n"
                        f"üí∞ –°—É–º–º–∞: {rubles_amount}‚ÇΩ\n"
                        f"üîó ID –ø–ª–∞—Ç–µ–∂–∞: <code>{payment_id}</code>\n\n"
                        f"üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        parse_mode="HTML"
                    )

                    # Admin ga xabar
                    try:
                        await message.bot.send_message(
                            chat_id=ADMIN_CHAT_ID,
                            text=f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï: –ü–ª–∞—Ç–µ–∂ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞!</b>\n\n"
                                 f"üë§ User ID: <code>{client_user_id}</code>\n"
                                 f"ü§ñ Bot DB ID: <code>{bot_db_id}</code>\n"
                                 f"üí∞ –°—É–º–º–∞: {rubles_amount}‚ÇΩ\n"
                                 f"üîó Payment ID: <code>{payment_id}</code>\n\n"
                                 f"‚ùå Bot –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!",
                            parse_mode="HTML"
                        )
                    except Exception as admin_error:
                        logger.error(f"Failed to notify admin: {admin_error}")

                    return

                logger.info(f"‚úÖ Bot validated: @{bot_info['username']}")
                if bot_info['owner']:
                    logger.info(f"üë®‚Äçüíº Owner: {bot_info['owner']['first_name']} (ID: {bot_info['owner']['uid']})")

                try:
                    success = await save_payment_transaction(
                        user_id=client_user_id,
                        source_bot_id=bot_db_id,
                        stars_amount=stars_amount,
                        rubles_amount=rubles_amount,
                        payment_id=payment_id,
                        payment_date=datetime.now()
                    )

                    if success:
                        logger.info("‚úÖ Payment saved to database")

                        try:
                            await send_admin_notification(
                                message.bot, client_user_id, bot_db_id,
                                stars_amount, rubles_amount, payment_id
                            )
                            logger.info("‚úÖ Admin notification sent")
                        except Exception as e:
                            logger.error(f"‚ö†Ô∏è Failed to send admin notification: {e}")

                        try:
                            await send_user_notification(
                                client_user_id, bot_db_id, rubles_amount
                            )
                            logger.info("‚úÖ User notification sent")
                        except Exception as e:
                            logger.error(f"‚ö†Ô∏è Failed to send user notification: {e}")

                        await message.answer(
                            f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                            f"üíé –û–ø–ª–∞—á–µ–Ω–æ: {stars_amount} ‚≠êÔ∏è\n"
                            f"üí∞ –°—É–º–º–∞: {rubles_amount}‚ÇΩ\n"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{client_user_id}</code>\n"
                            f"ü§ñ –ë–æ—Ç: @{bot_info['username']}\n"
                            f"üîó ID –ø–ª–∞—Ç–µ–∂–∞: <code>{payment_id}</code>\n\n"
                            f"üìä –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!",
                            parse_mode="HTML"
                        )

                        logger.info("‚úÖ Payment fully processed")

                    else:
                        logger.error("‚ùå Failed to save payment")
                        await message.answer(
                            f"‚ö†Ô∏è <b>–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!</b>\n\n"
                            f"üíé –û–ø–ª–∞—á–µ–Ω–æ: {stars_amount} ‚≠êÔ∏è\n"
                            f"üí∞ –°—É–º–º–∞: {rubles_amount}‚ÇΩ\n"
                            f"üîó ID: <code>{payment_id}</code>\n\n"
                            f"üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                            parse_mode="HTML"
                        )

                except Exception as db_error:
                    logger.error(f"‚ùå Database error: {db_error}")
                    import traceback
                    logger.error(traceback.format_exc())

                    await message.answer(
                        f"‚ö†Ô∏è <b>–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!</b>\n\n"
                        f"üîó ID –ø–ª–∞—Ç–µ–∂–∞: <code>{payment_id}</code>\n"
                        f"üí∞ –°—É–º–º–∞: {rubles_amount}‚ÇΩ\n\n"
                        f"üìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.",
                        parse_mode="HTML"
                    )

            logger.info("=" * 50)

        except Exception as e:
            logger.error(f"‚ùå CRITICAL ERROR in successful_payment_handler: {e}")
            import traceback
            logger.error(traceback.format_exc())

            await message.answer(
                "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã.\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.",
                parse_mode="HTML"
            )
            logger.info("=" * 50)

    # ===== OTHER HANDLERS =====

    @main_bot_router.callback_query(F.data == "back_to_main")
    async def back_to_main(callback: CallbackQuery, state: FSMContext):
        """Asosiy menyuga qaytish"""
        await state.clear()
        await callback.message.edit_text(
            f"üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await main_menu(),
            parse_mode="HTML"
        )
        await callback.answer()

    @main_bot_router.callback_query(F.data == "info")
    async def show_info(callback: CallbackQuery):
        info_text = (
            f"üìñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –±–æ—Ç–æ–≤</b>\n\n"
            f"ü§ñ <b>–ß—Ç–æ —ç—Ç–æ?</b>\n"
            f"–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–æ–≤ - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–∞–º–∏ –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
            f"‚ö° <b>–ë—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ:</b>\n"
            f"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∑–∞ 2-3 –º–∏–Ω—É—Ç—ã\n"
            f"‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –±–æ—Ç —Ñ—É–Ω–∫—Ü–∏–π\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n"
            f"‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"üéØ <b>6 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –±–æ—Ç:</b>\n\n"
            f"üí∏ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b> - –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö\n"
            f"üé¨ <b>–ö–∏–Ω–æ –±–æ—Ç</b> - –ø–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤\n"
            f"üî• <b>–ó–∞–≥—Ä—É–∑—á–∏–∫</b> - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å YouTube, Instagram, TikTok\n"
            f"üí¨ <b>ChatGPT</b> - –ò–ò –ø–æ–º–æ—â–Ω–∏–∫\n"
            f"‚ù§Ô∏è <b>–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞</b> - —Å–∏—Å—Ç–µ–º–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤ Leo Match\n"
            f"üë§ <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</b> - –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ\n"
            f"üí° <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
            f"‚Ä¢ –ë–µ–∑ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            f"‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫\n"
            f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
            f"‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        )

        await callback.message.edit_text(
            info_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞", callback_data="create_bot")],
                [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/Dark_Just")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]),
            parse_mode="HTML"
        )
        await callback.answer()

    @main_bot_router.callback_query(F.data == "faq")
    async def show_faq(callback: CallbackQuery):
        """FAQ bo'limi"""
        faq_text = (
            f"üí¨ <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)</b>\n\n"
            f"‚ùì <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞?</b>\n"
            f"1. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ ‚öôÔ∏è'\n"
            f"2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather\n"
            f"3. –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—à –±–æ—Ç\n"
            f"4. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏\n"
            f"5. –ì–æ—Ç–æ–≤–æ! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n\n"
            f"üí∞ <b>–°–∫–æ–ª—å–∫–æ —ç—Ç–æ —Å—Ç–æ–∏—Ç?</b>\n"
            f"–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ - –ë–ï–°–ü–õ–ê–¢–ù–û!\n"
            f"–ö–æ–º–∏—Å—Å–∏—è –±–µ—Ä–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –≤ –º–æ–¥—É–ª—è—Ö.\n\n"
            f"üîß <b>–ù—É–∂–Ω–æ –ª–∏ –∑–Ω–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ?</b>\n"
            f"–ù–ï–¢! –í—Å—ë —É–∂–µ –≥–æ—Ç–æ–≤–æ. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –º–æ–¥—É–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç–µ.\n\n"
            f"‚öôÔ∏è <b>–ú–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥—É–ª–∏ –ø–æ–∑–∂–µ?</b>\n"
            f"–î–ê! –í –ª—é–±–æ–µ –≤—Ä–µ–º—è –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n\n"
            f"üìä <b>–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?</b>\n"
            f"–í —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –±–æ—Ç—ã üñ•Ô∏è' –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'.\n\n"
            f"üõ†Ô∏è <b>–ß—Ç–æ –µ—Å–ª–∏ –±–æ—Ç —Å–ª–æ–º–∞–µ—Ç—Å—è?</b>\n"
            f"–£ –Ω–∞—Å –µ—Å—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!\n\n"
            f"üí∏ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞?</b>\n"
            f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å. –†–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è.\n\n"
            f"üîê <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ –¥–∞–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞?</b>\n"
            f"–î–ê! –¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º. –ú—ã –ù–ï –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.\n\n"
            f"‚è±Ô∏è <b>–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –±–æ—Ç –Ω–∞—á–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å?</b>\n"
            f"–°—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è! –û–±—ã—á–Ω–æ 30-60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É."
        )

        await callback.message.edit_text(
            faq_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url="https://t.me/Dark_Just")],
                [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url="https://ismoilov299.uz")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]),
            parse_mode="HTML"
        )
        await callback.answer()

    # Placeholder handlers
    @main_bot_router.callback_query(F.data == "statistics")
    async def statistics_redirect(callback: CallbackQuery):
        await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –±–æ—Ç—ã'")
        from modul.bot.main_bot.handlers.manage_bots import show_my_bots
        await show_my_bots(callback)

    @main_bot_router.callback_query(F.data == "balance")
    async def balance_redirect(callback: CallbackQuery):
        await callback.answer("üí∞ –ë–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –±–æ—Ç—ã'")
        from modul.bot.main_bot.handlers.manage_bots import show_my_bots
        await show_my_bots(callback)

    @main_bot_router.callback_query(F.data == "settings")
    async def settings_redirect(callback: CallbackQuery):
        await callback.answer("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–æ–≤ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –±–æ—Ç—ã'")
        from modul.bot.main_bot.handlers.manage_bots import show_my_bots
        await show_my_bots(callback)

    @main_bot_router.callback_query(F.data == "help")
    async def help_redirect(callback: CallbackQuery):
        await show_faq(callback)

    # Include sub-routers
    main_bot_router.include_router(create_bot_router)
    main_bot_router.include_router(manage_bots_router)

    logger.info("Main bot handlers initialized successfully!")